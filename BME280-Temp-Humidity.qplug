-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "BME280 Temp & Humidity",
  Version = "0.0",
  BuildVersion = "0.0.0.116",
  Id = "d6cf827a-6210-4ebe-8ae9-8e174e43eb1b",
  Author = "Victor R. Ellis",
  Description = "A plugin for local Temature and Humidity data from a BME280 sensor."  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 29, 32, 135 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "BME280 Temp & Humidity, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Main Page", "Setup/Status", "About" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Name ",
    Type = "string",
    Value = "Default Name"
  })
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  -------------------------Main Page--------------------------------------
  --Text Box Tempature
  table.insert(ctrls, {
    Name = "Tempature",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Output",
    UserPin = true
  }) 
  --[[
  --Text Box Heat Index
  table.insert(ctrls, {
    Name = "HeatIndex",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Output",
    UserPin = true
  }) 
  ]]
  --Text Box Humidity
  table.insert(ctrls, {
    Name = "Humidity",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Output",
    UserPin = true
  }) 
  --Text Box Pressure
  table.insert(ctrls, {
    Name = "Pressure",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Output",
    UserPin = true
  }) 
  -------------------------Setup/Status--------------------------------------
  --LED Indicator Status
  table.insert(ctrls, {
    Name = "StatusLED",
    ControlType = "Indicator",
    IndicatorType = "Led",
    Count = 1, -- if > 0 this will make the control an array
    --PinStyle = "Input" | "Output" | "Both",
    --UserPin = true | false  
  })
  --ID Button
  table.insert(ctrls, {
    Name = "ID",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 1, -- if > 0 this will make the control an array
    --PinStyle = "Input" | "Output" | "Both",
    --UserPin = true | false
  })
  --Status Indicator Status
  table.insert(ctrls, {
    Name = "StatusBox",
    ControlType = "Indicator",
    IndicatorType = "Status",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Output",
    UserPin = true
  }) 
  --Status Indicator Up Time
  table.insert(ctrls, {
    Name = "Up Time",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Output",
    UserPin = true
  })
  --Status Indicator Firmware
  table.insert(ctrls, {
    Name = "Firmware",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    --PinStyle = "Output",
    UserPin = false
  })
  --Status Indicator Analog Referance Voltage
  table.insert(ctrls, {
    Name = "Analog Ref",
    ControlType = "Text",
    Count = 1,
    PinStyle = "Output",
    UserPin = true
  }) 
  --Text Box Device IP Address
  table.insert(ctrls, {
    Name = "DeviceIP",
    ControlType = "Text",
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Both",
    UserPin = true
  })
  --Units Select Box 
  table.insert(ctrls, {
    Name = "Units",
    ControlType = "Text",
    Count = 1,
    PinStyle = "Output",
    UserPin = true
  })
  --Text Box Device Port
  table.insert(ctrls, {
    Name = "DevicePort",
    ControlType = "Knob",
    ControlUnit = "Integer",
    Min = 0,
    Max = 65535,
    Count = 1, -- if > 0 this will make the control an array
    PinStyle = "Both",
    UserPin = true
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  -------------------------Main Page--------------------------------------
  if CurrentPage == "Main Page" then
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Environment Data",
      Fill = {0,0,255,10},
      StrokeWidth = 1,
      Radius = 8,
      Position = {5,5},
      Size = {450,104},
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Tempature",
      Position = {20,35},
      Size = {75,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Tempature
    layout["Tempature"] = {
      PrettyName = "Tempature",
      Style = "Text",
      Position = {100,35},
      Size = {96,16},
    }
    --[[
    table.insert(graphics,{
      Type = "Text",
      Text = "Heat Index",
      Position = {225,35},
      Size = {75,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Heat Index
    layout["HeatIndex"] = {
      PrettyName = "Heat Index",
      Style = "Text",
      Position = {305,35},
      Size = {96,16},
    }
    ]]
    table.insert(graphics,{
      Type = "Text",
      Text = "Humidity",
      Position = {20,70},
      Size = {75,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Humidity
    layout["Humidity"] = {
      PrettyName = "Humidity",
      Style = "Text",
      Position = {100,70},
      Size = {96,16},
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Barometric Pressure",
      Position = {225,27},
      Size = {75,32},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Pressure
    layout["Pressure"] = {
      PrettyName = "Pressure",
      Style = "Text",
      Position = {305,35},
      Size = {96,16},
    }
  
  -------------------------Setup/Status--------------------------------------
  elseif CurrentPage == "Setup/Status" then
    --Group Box
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "BME280 Status",
      Fill = {0,0,255,10},
      StrokeWidth = 1,
      Radius = 8,
      Position = {5,5},
      Size = {407,111},
      HTextAlign = "Left"
    })
    --LED Indicator Status
    layout["StatusLED"] = {
      PrettyName = "StatusLED",
      Style = "Led",
      Position = {12,48},
      Size = {16,16},
      --Color = {255,0,255},
    }
    --ID Button
    layout["ID"] = {
      PrettyName = "ID Button",
      Style = "Button",
      TextFontSize = 9,
      Legend = "ID",
      Position = {372,12},
      Size = {36,24},
      Color = {255,255,0}
    }
    --Status Indicator Status
    layout["StatusBox"] = {
      PrettyName = "Status",
      Style = "Status",
      Position = {30,40},
      Size = {378,32},
    } 
    table.insert(graphics,{
      Type = "Text",
      Text = "Up Time",
      Position = {12,76},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Up Time
    layout["Up Time"] = {
      PrettyName = "Up Time",
      Style = "Text",
      Position = {112,76},
      Size = {96,16},
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Firmware",
      Position = {212,76},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Pull Count
    layout["Firmware"] = {
      PrettyName = "Firmware",
      Style = "Text",
      Position = {312,76},
      Size = {96,16},
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Analog Ref.",
      Position = {12,96},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Analog Referance Voltage
    layout["Analog Ref"] = {
      PrettyName = "Analog Referance Voltage",
      Style = "Text",
      Position = {112,96},
      Size = {96,16},
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Volts",
      Position = {208,96},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Left",
      VTextAlign = "Center"
    })
    --Group Box
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Setup",
      Fill = {0,0,255,10},
      StrokeWidth = 1,
      Radius = 8,
      Position = {5,127},
      Size = {407,82},
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Device IP Address",
      Position = {12,150},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Device IP
    layout["DeviceIP"] = {
      PrettyName = "Device IP",
      Style = "Text",
      Position = {112,150},
      Size = {96,16},
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Units",
      Position = {212,150},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Units Select Box
    layout["Units"] = {
      PrettyName = "Units",
      Style = "ComboBox",
      Choices = {"Metric (SI)", "US (USCS)"},
      Value = "Metric (SI)",
      Position = {312,150},
      Size = {96,16}
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Device Port",
      Position = {12,170},
      Size = {96,16},
      FontSize = 11,
      HTextAlign = "Right",
      VTextAlign = "Center"
    })
    --Text Box Device Port
    layout["DevicePort"] = {
      PrettyName = "Device Port",
      Style = "knob",
      Position = {112,170},
      Size = {96,16},
    }
  -------------------------About--------------------------------------
  elseif CurrentPage == "About" then
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "So Much Info",
      Fill = {0,0,255,10},
      StrokeWidth = 1,
      Radius = 8,
      Position = {5,5},
      Size = {400,200},
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "The BME280 Temp & Humidity is a network based tempature, humidity, and barametric pressor sensor perpheriphal designed to provide the Q-SYS architecture with realtime local environment data. Built around readily available open-source hardware the BME280 Temp & Humidity can be assembled for around $50 per unit. An Arduino Nano microcontroller in companion with a W5500 ethernet shield and a BME280 sensor enables environment data to be sent over the network via UDP communication with the Q-SYS core. This plugin allows for ease of setup and integration into an existing design appearing as any other design component.",
      Position = {15,30},
      Size = {370,120},
      FontSize = 11,
      HTextAlign = "Left",
      --VTextAlign = "Center"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Designed by: Victor R. Ellis",
      Position = {15,160},
      Size = {370,20},
      FontSize = 11,
      HTextAlign = "Center",
      VTextAlign = "Center"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "BME280 Temp & Humidity v" .. PluginInfo.Version,
      Position = {15,180},
      Size = {370,20},
      FontSize = 11,
      HTextAlign = "Center",
      VTextAlign = "Center"
    })
    --Add Arduino / QSC Communities logo
    table.insert(graphics,{
      Type = "Image",Image = "",
      Position = {5,205},
      Size = {400,163}
    })
    
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  -- A new Unit has been selected
  Controls.Units.EventHandler = function()
    if Controls['Units'].String == "Metric (SI)" then
      --Controls['Tempature'].String = 
    elseif Controls['Units'].String == "US (USCS)" then
      --Controls['Tempature'].String = 
    end
  end
  
  --New IP has been entered
  Controls.DeviceIP.EventHandler = function()
    print("New IP Defined: ".. Controls['DeviceIP'].String)
    -- Run at start
    Initialize()
  end
  
  --New Port has been entered
  Controls.DevicePort.EventHandler = function()
    print("New Port Defined: ".. math.floor(Controls['DevicePort'].Value))
  end
  
  --ID button state change
  Controls.ID.EventHandler = function()
    if Controls['ID'].Boolean == true then
      IDTimer:Start(0.2) --0.2
     else
      IDTimer:Stop()
      command = "IDOFF*"
      Send(command)   --Turn off ID light if it's on
    end
  end
  
  --Create a timer for sending packets
  SendTimer = Timer.New()
  --Create a timer for ID indicator
  IDTimer = Timer.New()
  
  --Send main packet on timer call
  SendTimer.EventHandler = function()
    command = "*"
    Send(command)   --Send UDP string
  end
  
  --Send ID packet on timer call
  IDTimer.EventHandler = function()
    IDindex = IDindex + 1
    if IDindex == 1 then
      command = "IDON*"
      Send(command)   --Send UDP string
    elseif IDindex == 2 then
      command = "IDOFF*"
      Send(command)   --Send UDP string
    elseif IDindex == 3 then
      command = "IDON*"
      Send(command)   --Send UDP string
    elseif IDindex == 4 then
      command = "IDOFF*"
      Send(command)   --Send UDP string
    elseif IDindex >= 7 then
      IDindex = 0
    end
  end
  
  
  
  
  
  --Variables
  LocalIPAddress = ""                -- IP Address of the Q-Sys Core NIC
  LocalNICName = "LAN A"             -- Name of the Network Interface (NIC) to use on the Q-Sys Core
  command = "this is a UDP test"     -- Packet to send via UDP
  UDPData = {}      -- Array to store UDP data
  ResponseTimeOut = 0     --- Timeout variable 
  IDindex = 0
  
  
  -- Sockets
  UDP = UdpSocket.New()  -- Create new UdpSocket object
  UDPSocketOpen = false
  
  
  -- Functions
  ----------------------------------------Parsing----------------------------------------------
  function list_string_split(input, delim)
    local t = {}
    local pos = 1
    local plain = true
    local offset = 1
    if delim == "" then
      plain = false
      delim = "."
      offset = 0
    end
    while true do
      next_delim = string.find(input, delim, pos, plain)
      if next_delim == nil then
        if(pos < #input) then
          table.insert(t, string.sub(input, pos))
        end
        break
      else
        table.insert(t, string.sub(input, pos, next_delim-offset))
        pos = next_delim + #delim
      end
    end
    return t
  end
  ----------------------------------------UDP----------------------------------------------
  -- If a NIC is specified by name, bind LocalIPAddress to it
  function SelectNIC()  
    if LocalNICName ~= nil then
      -- Detect the local IP address of LAN A
      local nics = Network.Interfaces()
      for i,nic in ipairs(nics) do
        if nic.Interface == LocalNICName then
          LocalIPAddress = nic.Address
        end
      end
    end
  end
  
  -- When the UDP Socket is created run these setup functions
  function Connected()
    print("UDP Socket Opened")
    --Update status box
    Controls['StatusBox'].Value = 4 -- 0=Ok 1=Compromised 2=Fault 3=Not Present 4=Missing 5=Initializing 6+n=Fault
    Controls['StatusBox'].String = Properties["Name "].Value .. "  UDP Socket Opened No Response"-- .. Properties["Name "].String
    Controls['StatusLED'].Color = "#7c0000"
    UDPSocketOpen = true
    
    -- Start any initial data requests or polling loops here
  
  end
  
  -- Wrapper for safely binding local address
  function OpenPorts(ip, port)
    UDP:Open(ip, port)
  end
  
  -- Opens a local UDP socket for use
  function OpenSocket()  
    -- If a local address has been chosen, open a UDP socket for use
    if LocalIPAddress ~= nil then
      print("Opening: " .. LocalIPAddress .. ":" .. (math.floor(Controls['DevicePort'].Value)))
      --Update status box
      Controls['StatusBox'].Value = 5 -- 0=Ok 1=Compromised 2=Fault 3=Not Present 4=Missing 5=Initializing 6+n=Fault
      Controls['StatusBox'].String = Properties["Name "].Value .. " Opening: " .. LocalIPAddress .. ":" .. (math.floor(Controls['DevicePort'].Value))
      Controls['StatusLED'].Color = "#0000ff"
      -- pcall will prevent down interfaces from causing script errors
      local portGood, err = pcall(OpenPorts, LocalIPAddress, (math.floor(Controls['DevicePort'].Value)))
      if not portGood then
        print("Error opening UDP Socket: " .. err)
        --Update status box
        Controls['StatusBox'].Value = 2 -- 0=Ok 1=Compromised 2=Fault 3=Not Present 4=Missing 5=Initializing 6+n=Fault
        Controls['StatusBox'].String = Properties["Name "].Value .. " Error opening UDP Socket: " .. err
        Controls['StatusLED'].Color = "#ff0000"
      else
        Connected()
      end
  
    -- Let the core choose the address and port of the UDP socket automatically
    else
      OpenPorts(nil,nil)
      Connected()
    end
  end
  
  
  -- Use the open UDPSocket to send a UDP datagram of the string (command) to the IPAddress and Port defined
  function Send(command)
  
    if UDPSocketOpen then
      --print("Sending " .. Controls['DeviceIP'].String .. ":" .. (math.floor(Controls['DevicePort'].Value)) .. " data: " .. command)  -- Print the command to be sent
      UDP:Send(Controls['DeviceIP'].String, (math.floor(Controls['DevicePort'].Value)), command)  -- Write command to the UDP socket
      -- Check if we got a response packet
      if ResponseTimeOut >= 4 then -- Allow for 5 dropped packets before throwing a fault
        --Update status box
        Controls['StatusBox'].Value = 4 -- 0=Ok 1=Compromised 2=Fault 3=Not Present 4=Missing 5=Initializing 6+n=Fault
        Controls['StatusBox'].String = Properties["Name "].Value .. " UDP Socket Opened No Response"
        Controls['StatusLED'].Color = "#ff0000"
      end
      ResponseTimeOut = ResponseTimeOut + 1      -- Set timeout variable
    else
      --If the socket is closed, open it and try again
      OpenSocket()
      Send(command)
    end
  end
  
  -- Handle cleanup when closing the UDP port
  function Close()
    UDP:Close()
    UDPSocketOpen = false
  
    -- Stop any timers and clear data here
  
  end
  
  -- Parsers
  -- UDP Data event is called when data is received on the port, either targeted at the local address or from a multicast network.
  UDP.Data = function(socket, packet)
    print("Address: " .. packet.Address, "Port: " .. packet.Port, "Rx: " .. packet.Data)  -- Prints data on the UDP socket
    --print("RX from Address: " .. packet.Address, "Port: " .. packet.Port)  -- Prints data on the UDP socket
  
    -- Handle response data here
    UDPData = list_string_split(packet.Data, ':')
    --Update status box
    Controls['StatusBox'].Value = 0 -- 0=Ok 1=Compromised 2=Fault 3=Not Present 4=Missing 5=Initializing 6+n=Fault
    Controls['StatusBox'].String = Properties["Name "].Value .. " Online"
    Controls['StatusLED'].Color = "#00ff00"
    ResponseTimeOut = 0   -- Reset timeout variable
  
    local MillisTime = {}
    MillisTime[1] = UDPData[1]
    -- Seconds
    MillisTime[2] = tostring((math.floor((tonumber(UDPData[1]) % 60000) / 1000)))
    -- Minutes
    MillisTime[3] = tostring((math.floor((tonumber(UDPData[1]) % 3600000) / 60000)))
    -- Hours
    MillisTime[4] = tostring((math.floor(tonumber(UDPData[1]) % 86400000 / 3600000)))
    -- Days
    MillisTime[5] = tostring((math.floor(tonumber(UDPData[1]) / 86400000)))
  
    Controls['Up Time'].String = MillisTime[5] .. "d " .. MillisTime[4] .. "h " .. MillisTime[3] .. "m " .. MillisTime[2] .. "s"
    Controls['Analog Ref'].String = UDPData[2]
    Controls['Firmware'].String = UDPData[3]
    --UDPData[4] reserved for future use
  
    if Controls['Units'].String == "Metric (SI)" then
      Controls['Tempature'].String = tonumber(string.format("%." .. (1 or 0) .. "f", UDPData[4])) .. "°C"
      Controls['Pressure'].String = UDPData[6] .. " Pa"
    elseif Controls['Units'].String == "US (USCS)" then
      Controls['Tempature'].String = tonumber(string.format("%." .. (1 or 0) .. "f", (UDPData[4]*1.8+32))) .. "°F"
      Controls['Pressure'].String = tonumber(string.format("%." .. (2 or 0) .. "f", (UDPData[6]/3386.39))) .. " inHg"
    end
  
    Controls['Humidity'].String = UDPData[5] .. " %"
  end
  
  ----------------------------------------Initialize Setup----------------------------------------------
  --Setup the UDP sockets to be used 
  function Initialize()
    if Controls['DeviceIP'].String == "" then
      --Update status box
      Controls['StatusBox'].Value = 2 -- 0=Ok 1=Compromised 2=Fault 3=Not Present 4=Missing 5=Initializing 6+n=Fault
      Controls['StatusBox'].String = Properties["Name "].Value .. " Invalid IP Address"
      Controls['StatusLED'].Color = "#ff0000"
     else
      SelectNIC()                      -- Choose the correct NIC for communication
      OpenSocket()                     -- Create the local UDP Socket for use
      SendTimer:Start(.03)
      --Send(command)
    end
    Controls['Units'].Choices = {"US (USCS)", "Metric (SI)"}
    Controls['Units'].String = "Metric (SI)"
  end
  
  -- Run at start
  Initialize()
  print(Properties["Name "].Value)
end
